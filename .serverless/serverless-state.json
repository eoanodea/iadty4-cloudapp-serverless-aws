{
  "service": {
    "service": "cloud-app-scenario-2-service",
    "serviceObject": {
      "name": "cloud-app-scenario-2-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "us-east-1",
      "apiGateway": {
        "shouldStartNameWithService": true,
        "binaryMediaTypes": [
          "image/png",
          "image/jpeg",
          "multipart/form-data"
        ]
      },
      "lambdaHashingVersion": "20201221",
      "environment": {
        "DB_ATLAS_URL": "mongodb+srv://app:D4KfqZwjS5Fbtirw@cluster0.lpcgc.mongodb.net/festivalCloud?retryWrites=true&w=majority",
        "aws_access_key_id": "ASIASIINLIH3TZPI6WM4",
        "aws_secret_access_key": "epQqWDFTsntN2Ua6CHYmDRZhOizySHx6mSxanauF",
        "aws_session_token": "FwoGZXIvYXdzEO///////////wEaDOk839yu0S7PUo6RlSLIATCzEGtcl9KHyI9GeVWm4sPB53L7QtBlulQ/nNvqSTGA9zH5Rxo6SWH3/I9Mk2x0dzhqFdqHab3ziYOii+GBPtpOLoak8KhWEif63uQd5anK2D44JK2IzWc9UlB/HVum9UDvRWSCh0Y61UTnI6NxnEBSV9pCgt3BCxI9jGNF2CSPlSeQh7ioGp8/1trTcf8JqUI/kVhFuzg6lzL6MBzvS6+EzpLGTRVkRVHlF9tD0W2Y9HU/BdsBzUZCSg3j1XyVkAiTES30x8zyKM/pwoIGMi0CJfroRdAWUKZE7D0rM9d8SRxGczMoVL7cvqz1vngA6UNWUQbq7A22TjyRiT0="
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "FestivalUnderscoregetUnderscorepostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-app-scenario-2-service-dev-festival_get_post"
            }
          },
          "FestivalUnderscoreputUnderscoredeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-app-scenario-2-service-dev-festival_put_delete"
            }
          },
          "StageUnderscoregetUnderscorepostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-app-scenario-2-service-dev-stage_get_post"
            }
          },
          "StageUnderscoreputUnderscoredeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-app-scenario-2-service-dev-stage_put_delete"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "cloud-app-scenario-2-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-app-scenario-2-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-app-scenario-2-service-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cloud-app-scenario-2-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-bf89a863-1a57-4863-8bcf-f6c2ed72047d"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "FestivalUnderscoregetUnderscorepostLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "FestivalUnderscoreputUnderscoredeleteLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "StageUnderscoregetUnderscorepostLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "StageUnderscoreputUnderscoredeleteLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "FestivalUnderscoregetUnderscorepostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-app-scenario-2-service/dev/1615913857396-2021-03-16T16:57:37.396Z/cloud-app-scenario-2-service.zip"
              },
              "Handler": "s_festival_get_post.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "cloud-app-scenario-2-service-dev-festival_get_post",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "Get all Festivals and create a new festival",
              "Environment": {
                "Variables": {
                  "DB_ATLAS_URL": "mongodb+srv://app:D4KfqZwjS5Fbtirw@cluster0.lpcgc.mongodb.net/festivalCloud?retryWrites=true&w=majority",
                  "aws_access_key_id": "ASIASIINLIH3TZPI6WM4",
                  "aws_secret_access_key": "epQqWDFTsntN2Ua6CHYmDRZhOizySHx6mSxanauF",
                  "aws_session_token": "FwoGZXIvYXdzEO///////////wEaDOk839yu0S7PUo6RlSLIATCzEGtcl9KHyI9GeVWm4sPB53L7QtBlulQ/nNvqSTGA9zH5Rxo6SWH3/I9Mk2x0dzhqFdqHab3ziYOii+GBPtpOLoak8KhWEif63uQd5anK2D44JK2IzWc9UlB/HVum9UDvRWSCh0Y61UTnI6NxnEBSV9pCgt3BCxI9jGNF2CSPlSeQh7ioGp8/1trTcf8JqUI/kVhFuzg6lzL6MBzvS6+EzpLGTRVkRVHlF9tD0W2Y9HU/BdsBzUZCSg3j1XyVkAiTES30x8zyKM/pwoIGMi0CJfroRdAWUKZE7D0rM9d8SRxGczMoVL7cvqz1vngA6UNWUQbq7A22TjyRiT0="
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FestivalUnderscoregetUnderscorepostLogGroup"
            ]
          },
          "FestivalUnderscoreputUnderscoredeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-app-scenario-2-service/dev/1615913857396-2021-03-16T16:57:37.396Z/cloud-app-scenario-2-service.zip"
              },
              "Handler": "s_festival_put_delete.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "cloud-app-scenario-2-service-dev-festival_put_delete",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "Get a single Festival, update or delete one",
              "Environment": {
                "Variables": {
                  "DB_ATLAS_URL": "mongodb+srv://app:D4KfqZwjS5Fbtirw@cluster0.lpcgc.mongodb.net/festivalCloud?retryWrites=true&w=majority",
                  "aws_access_key_id": "ASIASIINLIH3TZPI6WM4",
                  "aws_secret_access_key": "epQqWDFTsntN2Ua6CHYmDRZhOizySHx6mSxanauF",
                  "aws_session_token": "FwoGZXIvYXdzEO///////////wEaDOk839yu0S7PUo6RlSLIATCzEGtcl9KHyI9GeVWm4sPB53L7QtBlulQ/nNvqSTGA9zH5Rxo6SWH3/I9Mk2x0dzhqFdqHab3ziYOii+GBPtpOLoak8KhWEif63uQd5anK2D44JK2IzWc9UlB/HVum9UDvRWSCh0Y61UTnI6NxnEBSV9pCgt3BCxI9jGNF2CSPlSeQh7ioGp8/1trTcf8JqUI/kVhFuzg6lzL6MBzvS6+EzpLGTRVkRVHlF9tD0W2Y9HU/BdsBzUZCSg3j1XyVkAiTES30x8zyKM/pwoIGMi0CJfroRdAWUKZE7D0rM9d8SRxGczMoVL7cvqz1vngA6UNWUQbq7A22TjyRiT0="
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FestivalUnderscoreputUnderscoredeleteLogGroup"
            ]
          },
          "StageUnderscoregetUnderscorepostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-app-scenario-2-service/dev/1615913857396-2021-03-16T16:57:37.396Z/cloud-app-scenario-2-service.zip"
              },
              "Handler": "s_stage_get_post.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "cloud-app-scenario-2-service-dev-stage_get_post",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "Get all Stages and create a new stage",
              "Environment": {
                "Variables": {
                  "DB_ATLAS_URL": "mongodb+srv://app:D4KfqZwjS5Fbtirw@cluster0.lpcgc.mongodb.net/festivalCloud?retryWrites=true&w=majority",
                  "aws_access_key_id": "ASIASIINLIH3TZPI6WM4",
                  "aws_secret_access_key": "epQqWDFTsntN2Ua6CHYmDRZhOizySHx6mSxanauF",
                  "aws_session_token": "FwoGZXIvYXdzEO///////////wEaDOk839yu0S7PUo6RlSLIATCzEGtcl9KHyI9GeVWm4sPB53L7QtBlulQ/nNvqSTGA9zH5Rxo6SWH3/I9Mk2x0dzhqFdqHab3ziYOii+GBPtpOLoak8KhWEif63uQd5anK2D44JK2IzWc9UlB/HVum9UDvRWSCh0Y61UTnI6NxnEBSV9pCgt3BCxI9jGNF2CSPlSeQh7ioGp8/1trTcf8JqUI/kVhFuzg6lzL6MBzvS6+EzpLGTRVkRVHlF9tD0W2Y9HU/BdsBzUZCSg3j1XyVkAiTES30x8zyKM/pwoIGMi0CJfroRdAWUKZE7D0rM9d8SRxGczMoVL7cvqz1vngA6UNWUQbq7A22TjyRiT0="
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StageUnderscoregetUnderscorepostLogGroup"
            ]
          },
          "StageUnderscoreputUnderscoredeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-app-scenario-2-service/dev/1615913857396-2021-03-16T16:57:37.396Z/cloud-app-scenario-2-service.zip"
              },
              "Handler": "s_stage_put_delete.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "cloud-app-scenario-2-service-dev-stage_put_delete",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "Get a single Stage, update or delete one",
              "Environment": {
                "Variables": {
                  "DB_ATLAS_URL": "mongodb+srv://app:D4KfqZwjS5Fbtirw@cluster0.lpcgc.mongodb.net/festivalCloud?retryWrites=true&w=majority",
                  "aws_access_key_id": "ASIASIINLIH3TZPI6WM4",
                  "aws_secret_access_key": "epQqWDFTsntN2Ua6CHYmDRZhOizySHx6mSxanauF",
                  "aws_session_token": "FwoGZXIvYXdzEO///////////wEaDOk839yu0S7PUo6RlSLIATCzEGtcl9KHyI9GeVWm4sPB53L7QtBlulQ/nNvqSTGA9zH5Rxo6SWH3/I9Mk2x0dzhqFdqHab3ziYOii+GBPtpOLoak8KhWEif63uQd5anK2D44JK2IzWc9UlB/HVum9UDvRWSCh0Y61UTnI6NxnEBSV9pCgt3BCxI9jGNF2CSPlSeQh7ioGp8/1trTcf8JqUI/kVhFuzg6lzL6MBzvS6+EzpLGTRVkRVHlF9tD0W2Y9HU/BdsBzUZCSg3j1XyVkAiTES30x8zyKM/pwoIGMi0CJfroRdAWUKZE7D0rM9d8SRxGczMoVL7cvqz1vngA6UNWUQbq7A22TjyRiT0="
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "StageUnderscoreputUnderscoredeleteLogGroup"
            ]
          },
          "FestivalUnderscoregetUnderscorepostLambdaVersionUE99yBbGY20Zd2wcNvWPXQFIHUChuqj2H0fAsQmHKFk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FestivalUnderscoregetUnderscorepostLambdaFunction"
              },
              "CodeSha256": "LTlADCZu03qIpr0WYqNW4qtxw0CTg8IWDAy2bKvdQdA=",
              "Description": "Get all Festivals and create a new festival"
            }
          },
          "FestivalUnderscoreputUnderscoredeleteLambdaVersionRAWhfAwKzsPM4ISuvlVHkjtvp0CA6K8LyJiL1Cwk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FestivalUnderscoreputUnderscoredeleteLambdaFunction"
              },
              "CodeSha256": "LTlADCZu03qIpr0WYqNW4qtxw0CTg8IWDAy2bKvdQdA=",
              "Description": "Get a single Festival, update or delete one"
            }
          },
          "StageUnderscoregetUnderscorepostLambdaVersion5zNAvcmsRmv5O7vIqQhb7xrPUT1O8m42XtVilwPYU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StageUnderscoregetUnderscorepostLambdaFunction"
              },
              "CodeSha256": "LTlADCZu03qIpr0WYqNW4qtxw0CTg8IWDAy2bKvdQdA=",
              "Description": "Get all Stages and create a new stage"
            }
          },
          "StageUnderscoreputUnderscoredeleteLambdaVersion2cZ1qxPfPLUjNvMzqWvpv5TRiVEtJooTW8ZBhILTQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StageUnderscoreputUnderscoredeleteLambdaFunction"
              },
              "CodeSha256": "LTlADCZu03qIpr0WYqNW4qtxw0CTg8IWDAy2bKvdQdA=",
              "Description": "Get a single Stage, update or delete one"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "cloud-app-scenario-2-service-dev",
              "BinaryMediaTypes": [
                "image/png",
                "image/jpeg",
                "multipart/form-data"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceFestivals": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "festivals",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFestivalsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFestivals"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "stages",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStagesIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceStages"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFestivalsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFestivals"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FestivalUnderscoregetUnderscorepostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFestivalsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFestivals"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FestivalUnderscoregetUnderscorepostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFestivalsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFestivalsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FestivalUnderscoreputUnderscoredeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFestivalsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFestivalsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FestivalUnderscoreputUnderscoredeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFestivalsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFestivalsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FestivalUnderscoreputUnderscoredeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodStagesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StageUnderscoregetUnderscorepostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodStagesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StageUnderscoregetUnderscorepostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodStagesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStagesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StageUnderscoreputUnderscoredeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodStagesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStagesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StageUnderscoreputUnderscoredeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodStagesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStagesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "StageUnderscoreputUnderscoredeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1615913847417": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFestivalsPost",
              "ApiGatewayMethodFestivalsGet",
              "ApiGatewayMethodFestivalsIdVarGet",
              "ApiGatewayMethodFestivalsIdVarPut",
              "ApiGatewayMethodFestivalsIdVarDelete",
              "ApiGatewayMethodStagesPost",
              "ApiGatewayMethodStagesGet",
              "ApiGatewayMethodStagesIdVarGet",
              "ApiGatewayMethodStagesIdVarPut",
              "ApiGatewayMethodStagesIdVarDelete"
            ]
          },
          "FestivalUnderscoregetUnderscorepostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FestivalUnderscoregetUnderscorepostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FestivalUnderscoreputUnderscoredeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FestivalUnderscoreputUnderscoredeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "StageUnderscoregetUnderscorepostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StageUnderscoregetUnderscorepostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "StageUnderscoreputUnderscoredeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "StageUnderscoreputUnderscoredeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/cloud-app-scenario-2-service-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "cloud-app-scenario-2-service",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-app-scenario-2-service/dev/1615913857396-2021-03-16T16:57:37.396Z/custom-resources.zip"
              },
              "FunctionName": "cloud-app-scenario-2-service-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "CloudWatchLogsSubscriptionFilterFestivalUnderscoregetUnderscorepostLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:bf89a863-1a57-4863-8bcf-f6c2ed72047d#DvtdW64dnTxXmJD2hS#cloud-app-scenario-2-service#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "FestivalUnderscoregetUnderscorepostLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterFestivalUnderscoreputUnderscoredeleteLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:bf89a863-1a57-4863-8bcf-f6c2ed72047d#DvtdW64dnTxXmJD2hS#cloud-app-scenario-2-service#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "FestivalUnderscoreputUnderscoredeleteLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterStageUnderscoregetUnderscorepostLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:bf89a863-1a57-4863-8bcf-f6c2ed72047d#DvtdW64dnTxXmJD2hS#cloud-app-scenario-2-service#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "StageUnderscoregetUnderscorepostLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterStageUnderscoreputUnderscoredeleteLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:bf89a863-1a57-4863-8bcf-f6c2ed72047d#DvtdW64dnTxXmJD2hS#cloud-app-scenario-2-service#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "StageUnderscoreputUnderscoredeleteLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:bf89a863-1a57-4863-8bcf-f6c2ed72047d#DvtdW64dnTxXmJD2hS#cloud-app-scenario-2-service#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            }
          },
          "FestivalUnderscoregetUnderscorepostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FestivalUnderscoregetUnderscorepostLambdaVersionUE99yBbGY20Zd2wcNvWPXQFIHUChuqj2H0fAsQmHKFk"
            }
          },
          "FestivalUnderscoreputUnderscoredeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FestivalUnderscoreputUnderscoredeleteLambdaVersionRAWhfAwKzsPM4ISuvlVHkjtvp0CA6K8LyJiL1Cwk"
            }
          },
          "StageUnderscoregetUnderscorepostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StageUnderscoregetUnderscorepostLambdaVersion5zNAvcmsRmv5O7vIqQhb7xrPUT1O8m42XtVilwPYU"
            }
          },
          "StageUnderscoreputUnderscoredeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StageUnderscoreputUnderscoredeleteLambdaVersion2cZ1qxPfPLUjNvMzqWvpv5TRiVEtJooTW8ZBhILTQ"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "festival_get_post": {
        "handler": "s_festival_get_post.handler",
        "memorySize": 128,
        "description": "Get all Festivals and create a new festival",
        "events": [
          {
            "http": {
              "path": "festivals",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "festivals",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-app-scenario-2-service-dev-festival_get_post",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "FestivalUnderscoregetUnderscorepostLambdaVersionUE99yBbGY20Zd2wcNvWPXQFIHUChuqj2H0fAsQmHKFk"
      },
      "festival_put_delete": {
        "handler": "s_festival_put_delete.handler",
        "memorySize": 128,
        "description": "Get a single Festival, update or delete one",
        "events": [
          {
            "http": {
              "path": "festivals/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "festivals/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "festivals/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-app-scenario-2-service-dev-festival_put_delete",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "FestivalUnderscoreputUnderscoredeleteLambdaVersionRAWhfAwKzsPM4ISuvlVHkjtvp0CA6K8LyJiL1Cwk"
      },
      "stage_get_post": {
        "handler": "s_stage_get_post.handler",
        "memorySize": 128,
        "description": "Get all Stages and create a new stage",
        "events": [
          {
            "http": {
              "path": "stages",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "stages",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-app-scenario-2-service-dev-stage_get_post",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "StageUnderscoregetUnderscorepostLambdaVersion5zNAvcmsRmv5O7vIqQhb7xrPUT1O8m42XtVilwPYU"
      },
      "stage_put_delete": {
        "handler": "s_stage_put_delete.handler",
        "memorySize": 128,
        "description": "Get a single Stage, update or delete one",
        "events": [
          {
            "http": {
              "path": "stages/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "stages/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "stages/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-app-scenario-2-service-dev-stage_put_delete",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "StageUnderscoreputUnderscoredeleteLambdaVersion2cZ1qxPfPLUjNvMzqWvpv5TRiVEtJooTW8ZBhILTQ"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "app": "cloud-app-scenario-2",
    "org": "eoanod",
    "layers": {},
    "initialServerlessConfig": {
      "org": "eoanod",
      "app": "cloud-app-scenario-2",
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "useDotenv": true,
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "bf89a863-1a57-4863-8bcf-f6c2ed72047d",
    "appUid": "DvtdW64dnTxXmJD2hS",
    "artifact": "/Users/eoan/Sites/iadt/y4/cloud_app/ca/ca2/scenario-2-wrapper/cloud-app-scenario-2/.serverless/cloud-app-scenario-2-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/cloud-app-scenario-2-service/dev/1615913857396-2021-03-16T16:57:37.396Z",
    "artifact": "cloud-app-scenario-2-service.zip"
  }
}